# python bot.py
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
from config import TOKEN
import markups as nav
import base
import random
import asyncio

# Configure logging (info about bot in terminal)
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# This handler will be called when user sends `/start` or `/help` command
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.from_user.id, 'üçìMeow (–ü—Ä–∏–≤–µ—Ç), {0.first_name}üçì \n–Ø –ø–æ–ø–∞–ª –Ω–∞ –∑–µ–º–ª—é –Ω–µ–¥–∞–≤–Ω–æ, –Ω–æ —É–∂–µ –≤–∏–∂—É, –∫—Ç–æ —Ç—É—Ç —Å–ª–∞–¥–∫–∏–π –ø–∏—Ä–æ–∂–æ—á–µ–∫ (—Ç—ã)\n–ß–µ–º —Å–µ–≥–æ–¥–Ω—è –∑–∞–π–º—ë–º—Å—è?üåº'.format(message.from_user),reply_markup = nav.mainMenu)

# help command
@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.from_user.id, 'Meow \n–î–µ—Ä–∂–∏ –º–µ–Ω—é: '.format(message.from_user),reply_markup = nav.mainMenu)

# sms for sms
@dp.message_handler()
async def echo(message: types.Message):
    # await message.answer(message.text)
    if message.text == '–í—Å–µ–ª–µ–Ω–Ω–∞—è':
        await bot.send_message(message.from_user.id, '–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —Ç—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!', reply_markup = nav.Menu)
    elif message.text == '–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
        await bot.send_message(message.from_user.id, '–í—Å–µ–ª–µ–Ω–Ω–∞—è –¥—É–º–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ —Ç–µ–±–µ —á–∏—Å–ª–æ...\nüåº' + str(random.randint(1, 9999)))
    elif message.text == '–û—Ç–¥–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏':
        await bot.send_message(message.from_user.id, '–∏ —á—Ç–æ –≤—ã –≤—Å–µ –Ω–∞–¥–µ–µ—Ç–µ—Å—å —Ç—É—Ç –Ω–∞–π—Ç–∏?')
    elif message.text == '–ü–ª–∞–Ω–µ—Ç–∞ –§–ª–æ–ø–ø':
        await bot.send_photo(message.from_user.id, base.FLOPPA[int(random.randint(0,len(base.FLOPPA)-1))],
                             reply_to_message_id=message.message_id)

    elif message.text == '–ö–æ—Ç–æ–ú–∏—Ä':
        await bot.send_photo(message.from_user.id, base.KITTENS[int(random.randint(0,2))],
                             reply_to_message_id=message.message_id)

    elif message.text == '–ü–ª–∞–Ω–µ—Ç–∞ –º–∏–ª—ã—Ö –≤–∏–¥–µ–æ':
            user_id = message.from_user.id
            await bot.send_chat_action(user_id, ChatActions.RECORD_VIDEO_NOTE)
            await asyncio.sleep(1)  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_video_note(message.from_user.id, base.VIDEO_NOTE)

    elif message.text == '–ü–ª–∞–Ω–µ—Ç–∞ –º—É–ª—å—Ç–∏–∫–æ–≤':
        await bot.send_message(message.from_user.id, '–º—É—Ä')

    else:
        await bot.send_message(message.from_user.id, '–ó–∞—á–µ–º –ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã? –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫!',  reply_markup=nav.mainMenu)




# –¥–ª–∏–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
